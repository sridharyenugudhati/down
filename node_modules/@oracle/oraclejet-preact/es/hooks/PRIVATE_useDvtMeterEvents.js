/* @oracle/oraclejet-preact: 15.1.5 */
import { useRef, useState } from 'preact/hooks';
import { useUser } from './UNSAFE_useUser.js';
import { useTooltipControlled } from './UNSAFE_useTooltip.js';
import '../index-ce660c32.js';
import 'preact';
import '../Common.js';
import '../Common/themes.js';
import '../Common/themes/redwood/theme.js';
import '../Common/themes/themeContract.css.js';
import 'preact/jsx-runtime';
import 'preact/compat';
import './UNSAFE_useId.js';
import '../UNSAFE_Floating.js';
import '../Floating-44024b63.js';
import '../index-a9b88c2d.js';
import '../utils/PRIVATE_floatingUtils.js';
import '../utils/PRIVATE_refUtils.js';
import './UNSAFE_useOutsideClick.js';
import '../utils/UNSAFE_arrayUtils.js';
import './UNSAFE_useComponentTheme.js';
import '../utils/UNSAFE_logger.js';
import '../_curry1-4637aee9.js';
import '../_curry2-da491c7e.js';
import '../utils/UNSAFE_classNames.js';
import '../classNames-6df97f98.js';
import '../utils-79fd9e1a.js';
import '../UNSAFE_Floating/themes/redwood/FloatingTheme.js';
import '../UNSAFE_Floating/themes/FloatingStyles.css.js';
import './../FloatingStyles.styles.css';
import '../UNSAFE_Floating/themes/redwood/FloatingBaseTheme.css.js';
import './../UNSAFE_Floating/themes/redwood/FloatingBaseTheme.styles.css';
import '../UNSAFE_Floating/themes/redwood/FloatingVariants.css.js';
import '../vanilla-extract-recipes-createRuntimeFn.esm-ea2e9956.js';
import '../vanilla-extract-dynamic.esm-22241307.js';
import '../UNSAFE_Floating/themes/FloatingContract.css.js';
import '../UNSAFE_Layer.js';
import '../useThemeInterpolations-18331a05.js';
import './UNSAFE_useColorScheme.js';
import './UNSAFE_useScale.js';
import '../utils/UNSAFE_interpolations/theme.js';
import '../UNSAFE_Theme.js';
import '../utils/UNSAFE_mergeInterpolations.js';
import '../_curry3-7db59ba0.js';
import '../_has-92b39746.js';
import './UNSAFE_useHover.js';
import './UNSAFE_useToggle.js';
import './UNSAFE_useFocus.js';
import './UNSAFE_useTouch.js';
import '../utils/UNSAFE_mergeProps.js';
import './UNSAFE_useAnimation.js';
import '../useAnimation-6ccd68bf.js';
import './UNSAFE_useThemeInterpolations.js';
import './UNSAFE_useTooltip/themes/redwood/TooltipContentTheme.js';
import './UNSAFE_useTooltip/themes/TooltipContentStyles.css.js';
import './../TooltipContentStyles.styles.css';
import './UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.css.js';
import './UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.styles.css';
import './UNSAFE_useTooltip/themes/redwood/TooltipContentVariants.css.js';
import './../TooltipContentVariants.styles2.css';

const handleInput = (inputValue, currentInput, onInput) => {
    onInput?.({ value: inputValue });
    currentInput.current = inputValue;
};
const cancelEvent = (event) => {
    event.preventDefault();
    event.stopPropagation();
};

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
function usePointerEvents(value, getValue, targetRef, currentInputRef, onCommit, onInput) {
    const isPointerDown = useRef(false);
    const pointerUpHandler = (event) => {
        isPointerDown.current = false;
        const val = getValue(event);
        if (val !== undefined) {
            onCommit?.({ value: val });
        }
    };
    const hoverHandler = (event) => {
        if (isPointerDown.current) {
            const val = getValue(event);
            if (val !== undefined && val != currentInputRef.current) {
                handleInput(val, currentInputRef, onInput);
            }
        }
    };
    const pointerDownHandler = (event) => {
        isPointerDown.current = true;
        targetRef.current?.setPointerCapture(event.pointerId);
        const val = getValue(event);
        if (val !== undefined && val != currentInputRef.current) {
            handleInput(val, currentInputRef, onInput);
        }
    };
    const blurHandler = () => {
        isPointerDown.current = false;
        onCommit?.({ value: value });
    };
    return {
        onPointerUp: pointerUpHandler,
        onBlur: blurHandler,
        onPointerMove: hoverHandler,
        onPointerDown: pointerDownHandler
    };
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
function useKeyboardEvents(value, min, max, step, currentInputRef, onCommit, onInput) {
    const { direction } = useUser();
    const isRtl = direction === 'rtl';
    const keyDownHandler = (event) => {
        const key = event.key;
        switch (key) {
            case 'Tab':
                return;
            case 'ArrowDown':
                handleInput(Math.max(min, value - step), currentInputRef, onInput);
                cancelEvent(event);
                break;
            case 'ArrowUp':
                handleInput(Math.min(max, value + step), currentInputRef, onInput);
                cancelEvent(event);
                break;
            case 'ArrowLeft': {
                const inputValue = isRtl ? Math.min(max, value + step) : Math.max(min, value - step);
                handleInput(inputValue, currentInputRef, onInput);
                cancelEvent(event);
                break;
            }
            case 'ArrowRight': {
                const inputValue = isRtl ? Math.max(min, value - step) : Math.min(max, value + step);
                handleInput(inputValue, currentInputRef, onInput);
                cancelEvent(event);
                break;
            }
        }
    };
    const keyUpHandler = (event) => {
        const key = event.key;
        switch (key) {
            case 'Enter':
                onCommit?.({ value: value });
                cancelEvent(event);
                break;
            case 'Tab':
                handleInput(value, currentInputRef, onInput);
                cancelEvent(event);
                break;
            case 'Home':
                handleInput(min, currentInputRef, onInput);
                cancelEvent(event);
                break;
            case 'End':
                handleInput(max, currentInputRef, onInput);
                cancelEvent(event);
                break;
        }
    };
    return {
        onKeyUp: keyUpHandler,
        onKeyDown: keyDownHandler
    };
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
function useMeterDatatip(value, datatip, ariaDescribedBy) {
    const datatipText = datatip === null ? '' : datatip === undefined ? `${value}` : datatip;
    const [isDatatipOpen, setDatatipOpen] = useState(false);
    const { tooltipContent, tooltipProps } = useTooltipControlled({
        text: datatipText,
        isOpen: isDatatipOpen,
        position: 'top',
        isDisabled: datatip === null,
        anchor: { x: 'pointer', y: 'pointer' },
        variant: 'datatip',
        offset: {
            mainAxis: 8,
            crossAxis: 0
        },
        onToggle: ({ value }) => setDatatipOpen(value)
    });
    tooltipProps['aria-describedby'] = [ariaDescribedBy, tooltipProps['aria-describedby']]
        .filter(Boolean)
        .join(' ');
    return { datatipContent: tooltipContent, datatipProps: tooltipProps };
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

export { useKeyboardEvents, useMeterDatatip, usePointerEvents };
//# sourceMappingURL=PRIVATE_useDvtMeterEvents.js.map
