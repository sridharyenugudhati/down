/* @oracle/oraclejet-preact: 15.1.5 */
import { jsxs, jsx, Fragment } from 'preact/jsx-runtime';
import { useComponentTheme } from './hooks/UNSAFE_useComponentTheme.js';
import { I as InlineHelpSource } from './InlineHelpSource-d3bbf3f1.js';
export { I as InlineHelpSource } from './InlineHelpSource-d3bbf3f1.js';
import { UserAssistanceRedwoodTheme } from './UNSAFE_UserAssistance/themes/redwood/UserAssistanceTheme.js';
import { useTranslationBundle } from './hooks/UNSAFE_useTranslationBundle.js';
import './UNSAFE_ComponentMessage.js';
import { useFormContext } from './hooks/UNSAFE_useFormContext.js';
import { useFormFieldContext } from './hooks/UNSAFE_useFormFieldContext.js';
import './utils/UNSAFE_classNames.js';
import { useInputGroupContext } from './hooks/UNSAFE_useInputGroupContext.js';
import { c as classNames } from './classNames-6df97f98.js';
import { C as ComponentMessageContainer } from './ComponentMessageContainer-5917bcb5.js';
import { Popup } from './UNSAFE_Popup.js';
import './UNSAFE_Divider.js';
import { u as usePopupFocusWithin, C as CompactHelpSource } from './CompactHelpSource-11fe262c.js';
import { dividerStyle, assistiveStyles, requiredIconBase, requiredIconLabelEdgeStart, iconUserAssistancePopupFocus, iconUserAssistanceIcon } from './UNSAFE_UserAssistance/themes/UserAssistanceStyles.css.js';
import { D as Divider } from './Divider-721a761c.js';
import { useTooltip } from './hooks/UNSAFE_useTooltip.js';
import { useRef } from 'preact/hooks';
import { usePress } from './hooks/UNSAFE_usePress.js';
import { useToggle } from './hooks/UNSAFE_useToggle.js';
import { HelpIcon as SvgHelp } from './PRIVATE_ThemedIcons/HelpIcon.js';
import { PopupRedwoodTheme } from './UNSAFE_Popup/themes/redwood/PopupTheme.js';
import './utils/UNSAFE_logger.js';
import './_curry1-4637aee9.js';
import './_curry2-da491c7e.js';
import './hooks/UNSAFE_useTabbableMode.js';
import 'preact';
import './UNSAFE_UserAssistance/themes/redwood/UserAssistanceBaseTheme.css.js';
import './UNSAFE_UserAssistance/themes/redwood/UserAssistanceBaseTheme.styles.css';
import './UNSAFE_UserAssistance/themes/redwood/UserAssistanceVariants.css.js';
import './UserAssistanceStyles.styles.css';
import './vanilla-extract-recipes-createRuntimeFn.esm-ea2e9956.js';
import './index-ce660c32.js';
import './Common.js';
import './Common/themes.js';
import './Common/themes/redwood/theme.js';
import './Common/themes/themeContract.css.js';
import 'preact/compat';
import './ComponentMessage-f1feb94a.js';
import './PRIVATE_Message.js';
import './UNSAFE_Flex.js';
import './Flex-1ec75561.js';
import './utils/UNSAFE_interpolations/dimensions.js';
import './utils/UNSAFE_arrayUtils.js';
import './utils/UNSAFE_size.js';
import './UNSAFE_Theme.js';
import './utils-79fd9e1a.js';
import './utils/UNSAFE_mergeInterpolations.js';
import './_curry3-7db59ba0.js';
import './_has-92b39746.js';

import './utils/UNSAFE_interpolations/boxalignment.js';
import './keys-6a8847c4.js';
import './utils/UNSAFE_interpolations/flexbox.js';
import './flexbox-94918d4c.js';
import './utils/UNSAFE_interpolations/flexitem.js';
import './flexitem-cf0b1a33.js';
import './utils/PRIVATE_timer.js';
import './PRIVATE_Message/themes/MessageStyles.css.js';
import './MessageStyles.styles.css';
import './MessageCloseButton-f4c6ebd4.js';
import './UNSAFE_IconButton.js';
import './IconButton-080dd7b5.js';
import './UNSAFE_BaseButton.js';
import './BaseButton-f4a900bd.js';
import './hooks/UNSAFE_useHover.js';
import './hooks/UNSAFE_useActive.js';
import './utils/PRIVATE_clientHints.js';
import './clientHints-6ff785cb.js';
import './utils/UNSAFE_mergeProps.js';
import './UNSAFE_ButtonLayout.js';
import './ButtonLayout-d77f4c52.js';
import './UNSAFE_Text.js';
import './Text-5d60dbd2.js';
import './UNSAFE_Text/themes/TextStyles.css.js';
import './TextStyles.styles.css';
import './PRIVATE_ThemedIcons/CloseIcon.js';
import './UNSAFE_Icon.js';
import './Icon-44f1fb0b.js';
import './UNSAFE_Icon/themes/IconStyle.css.js';
import './IconStyle.styles.css';
import './MessageDetail-f7fc7fa8.js';
import './MessageFormattingUtils-24e5f4ed.js';
import './utils/UNSAFE_getLocale.js';
import './utils/UNSAFE_stringUtils.js';
import './stringUtils-0805904b.js';
import './Message.types-a7a0a35b.js';
import './MessageStartIcon-f459d4a6.js';
import './PRIVATE_ThemedIcons/MessageConfirmationIcon.js';
import './PRIVATE_ThemedIcons/MessageErrorIcon.js';
import './PRIVATE_ThemedIcons/MessageInfoIcon.js';
import './PRIVATE_ThemedIcons/MessageWarningIcon.js';
import './MessageSummary-ca8ee040.js';
import './MessageTimestamp-5727cf78.js';
import './MessageUtils-42e0fc95.js';
import './utils/UNSAFE_soundUtils.js';
import './UNSAFE_MessageBanner/themes/redwood/MessageBannerTheme.js';
import './UNSAFE_MessageBanner/themes/MessageBannerStyles.css.js';
import './MessageBannerStyles.styles.css';
import './UNSAFE_MessageBanner/themes/redwood/MessageBannerBaseTheme.css.js';
import './UNSAFE_MessageBanner/themes/redwood/MessageBannerBaseTheme.styles.css';
import './UNSAFE_MessageBanner/themes/redwood/MessageBannerVariants.css.js';
import './MessageBannerVariants.styles.css';
import './MessagesManager-a46ef486.js';
import './PRIVATE_TransitionGroup.js';
import './hooks/UNSAFE_useAnimation.js';
import './useAnimation-6ccd68bf.js';
import './hooks/UNSAFE_useMessagesContext.js';
import './UNSAFE_HiddenAccessible.js';
import './HiddenAccessible-18327856.js';
import './UNSAFE_ComponentMessage/themes/redwood/ComponentMessageTheme.js';
import './UNSAFE_ComponentMessage/themes/ComponentMessageStyles.css.js';
import './ComponentMessageStyles.styles.css';
import './UNSAFE_ComponentMessage/themes/redwood/ComponentMessageBaseTheme.css.js';
import './UNSAFE_ComponentMessage/themes/redwood/ComponentMessageBaseTheme.styles.css';
import './UNSAFE_ComponentMessage/themes/redwood/ComponentMessageVariants.css.js';
import './UNSAFE_Floating.js';
import './Floating-44024b63.js';
import './index-a9b88c2d.js';
import './hooks/UNSAFE_useUser.js';
import './utils/PRIVATE_floatingUtils.js';
import './utils/PRIVATE_refUtils.js';
import './hooks/UNSAFE_useOutsideClick.js';
import './UNSAFE_Floating/themes/redwood/FloatingTheme.js';
import './UNSAFE_Floating/themes/FloatingStyles.css.js';
import './FloatingStyles.styles.css';
import './UNSAFE_Floating/themes/redwood/FloatingBaseTheme.css.js';
import './UNSAFE_Floating/themes/redwood/FloatingBaseTheme.styles.css';
import './UNSAFE_Floating/themes/redwood/FloatingVariants.css.js';
import './vanilla-extract-dynamic.esm-22241307.js';
import './UNSAFE_Floating/themes/FloatingContract.css.js';
import './utils/PRIVATE_tabbableUtils.js';
import './_arity-249f1f1f.js';
import './UNSAFE_FocusTrap.js';
import './FocusTrap-46648548.js';
import './UNSAFE_Layer.js';
import './useThemeInterpolations-18331a05.js';
import './hooks/UNSAFE_useColorScheme.js';
import './hooks/UNSAFE_useScale.js';
import './utils/UNSAFE_interpolations/theme.js';
import './hooks/PRIVATE_useAnimationStatus.js';
import './UNSAFE_Popup/themes/PopupContract.css.js';
import './hooks/UNSAFE_useFocusWithin.js';
import './useFocusWithin-d572dd3b.js';
import './UNSAFE_Label/themes/redwood/LabelTheme.js';
import './UNSAFE_Label/themes/LabelStyles.css.js';
import './LabelStyles.styles.css';
import './UNSAFE_Label/themes/redwood/LabelBaseTheme.css.js';
import './UNSAFE_Label/themes/redwood/LabelBaseTheme.styles.css';
import './UNSAFE_Label/themes/redwood/LabelVariants.css.js';
import './UNSAFE_Divider/themes/DividerStyles.css.js';
import './DividerStyles.styles.css';
import './hooks/UNSAFE_useId.js';
import './hooks/UNSAFE_useFocus.js';
import './hooks/UNSAFE_useTouch.js';
import './hooks/UNSAFE_useThemeInterpolations.js';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentTheme.js';
import './hooks/UNSAFE_useTooltip/themes/TooltipContentStyles.css.js';
import './TooltipContentStyles.styles.css';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.css.js';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.styles.css';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentVariants.css.js';
import './TooltipContentVariants.styles2.css';
import './UNSAFE_Popup/themes/redwood/PopupBaseTheme.css.js';
import './UNSAFE_Popup/themes/redwood/PopupBaseTheme.styles.css';
import './UNSAFE_Popup/themes/redwood/PopupVariants.css.js';
import './PopupStyles.styles.css';

function InlineHelp({ assistiveText, sourceLink, sourceText }) {
    const { styles: { helpTextStyles } } = useComponentTheme(UserAssistanceRedwoodTheme);
    return (jsxs("div", { children: [assistiveText && sourceLink ? (jsx("span", { class: helpTextStyles, children: assistiveText })) : (assistiveText), sourceLink && jsx(InlineHelpSource, { source: sourceLink, children: sourceText })] }));
}

function InlineRequired({ align = 'end', hasHelp = false, hasMessages = false }) {
    const { classes } = useComponentTheme(UserAssistanceRedwoodTheme, {
        align,
        visible: hasHelp || hasMessages ? 'hide' : 'show' // TODO: fix typing so that options autocomplete
    });
    const translations = useTranslationBundle('@oracle/oraclejet-preact');
    const requiredStr = translations.userAssistance_required();
    return jsx("div", { class: classes, children: requiredStr });
}

// defaults to type='reflow'. If this is within an oj-form-layout, the o-f-l
// will pass down its type which defaults to 'efficient' (TODO).
function InlineUserAssistanceContainer({ variant = 'reflow', children, id }) {
    const { classes, styles: { inlineContainerBaseStyles } } = useComponentTheme(UserAssistanceRedwoodTheme, {
        container: variant
    });
    // we want to suppress the display of messages if it's in a group context
    const inputGroupContext = useInputGroupContext();
    if (inputGroupContext !== null)
        return null;
    const content = (jsx("div", { class: classNames([classes, inlineContainerBaseStyles]), id: id, children: children }));
    return content;
}

// This has the precedence rules for the user assistance.
function InlineUserAssistance({ assistiveText, fieldLabel, helpSourceLink, helpSourceText, id, isRequiredShown, requiredAlignment, messages = [], userAssistanceDensity }) {
    const { isReadonly: isFormReadonly } = useFormContext();
    const needsUserAssistanceIfNoContent = userAssistanceDensity === 'efficient' && isFormReadonly === false;
    const { isFocused } = useFormFieldContext();
    const uaInlineContent = messages.length > 0 ? (jsx(ComponentMessageContainer, { fieldLabel: fieldLabel, messages: messages })) : (assistiveText || helpSourceLink) && isFocused ? (jsx(InlineHelp, { assistiveText: assistiveText, sourceLink: helpSourceLink, sourceText: helpSourceText })) : isRequiredShown ? (jsx(InlineRequired, { align: requiredAlignment })) : null;
    // when reflow we do not render unless it has content.
    // when efficient we render regardless of if it has content.
    // TODO: Get the userAssistanceDensity value from the FormContext
    return uaInlineContent || needsUserAssistanceIfNoContent ? (jsx(InlineUserAssistanceContainer, { id: id, variant: userAssistanceDensity, children: uaInlineContent })) : null;
}

function CompactUserAssistance({ anchorRef, assistiveText, fieldLabel, id, messages = [] }) {
    const { isInputFocused, isReadonly } = useFormFieldContext();
    const flip = { mainAxis: true, crossAxis: false };
    const { isFocused: isPopupFocused, popupProps } = usePopupFocusWithin();
    const isOpen = isInputFocused === true || isPopupFocused === true;
    const { baseTheme } = useComponentTheme(UserAssistanceRedwoodTheme);
    const uaCompactContent = isReadonly !== true && (messages.length > 0 || assistiveText) ? (jsx(Popup, { ...popupProps, placement: "end-top-corner", isOpen: isOpen, anchorRef: anchorRef, flipOptions: flip, tail: "simple", children: jsxs("div", { id: id, class: baseTheme, children: [messages.length > 0 && (jsx(ComponentMessageContainer, { fieldLabel: fieldLabel, messages: messages })), messages.length > 0 && assistiveText && (jsx("span", { class: dividerStyle, children: jsx(Divider, {}) })), assistiveText && jsx("span", { class: assistiveStyles, children: assistiveText })] }) })) : null;
    return uaCompactContent;
}

const CompactLabelAssistance = ({ helpIconId, helpSourceLink, helpSourceText, isRequiredShown, labelEdge }) => {
    const translations = useTranslationBundle('@oracle/oraclejet-preact');
    const requiredStr = translations.userAssistance_required();
    const { tooltipContent, tooltipProps } = useTooltip({
        text: requiredStr,
        offset: { mainAxis: 8 }
    });
    const requiredStyles = classNames([
        requiredIconBase,
        labelEdge === 'start' && requiredIconLabelEdgeStart
    ]);
    const requiredIndicator = isRequiredShown && (jsxs("span", { children: [jsx("span", { class: requiredStyles, ...tooltipProps }), tooltipContent] }));
    const helpIndicator = (helpSourceLink || helpSourceText) && (jsx(CompactHelpSource, { id: helpIconId, labelEdge: labelEdge, source: helpSourceLink, children: helpSourceText }));
    return (jsxs(Fragment, { children: [labelEdge !== 'start' && requiredIndicator, helpIndicator, labelEdge === 'start' && requiredIndicator] }));
};

/**
 * Created to match icon user assistance spec for use with radio option, pending design review
 * of inline UA assistance.
 */
const IconUserAssistance = ({ assistiveText, helpSourceLink, helpSourceText, isTabbable = true, id }) => {
    const { bool: isOpen, setFalse: setIsOpenFalse, setTrue: setIsOpenTrue } = useToggle(false);
    const translations = useTranslationBundle('@oracle/oraclejet-preact');
    const userAssistance_learnMoreStr = translations.userAssistance_learnMore();
    const sourceText = helpSourceLink && (helpSourceText || userAssistance_learnMoreStr);
    // We are referencing popup vars, so we need to bring in the baseTheme for popup
    const { baseTheme: popupBaseTheme } = useComponentTheme(PopupRedwoodTheme);
    const { pressProps } = usePress((e) => {
        e.preventDefault();
        setIsOpenTrue();
    });
    const anchorRef = useRef(null);
    const iconUserAssistanceClasses = classNames([popupBaseTheme, iconUserAssistancePopupFocus]);
    return helpSourceLink || assistiveText ? (jsxs(Fragment, { children: [jsx("span", { ...pressProps, ref: anchorRef, tabIndex: isTabbable ? 0 : -1, class: iconUserAssistanceIcon, id: `${id}-help-icon`, children: jsx(SvgHelp, {}) }), jsx(Popup, { placement: "top", isOpen: isOpen, anchorRef: anchorRef, onClose: setIsOpenFalse, onClickOutside: setIsOpenFalse, shiftOptions: { mainAxis: true, crossAxis: false }, initialFocus: "firstFocusable", children: jsx("div", { id: id, tabIndex: 0, class: iconUserAssistanceClasses, children: jsx(InlineHelp, { assistiveText: assistiveText, sourceLink: helpSourceLink, sourceText: sourceText }) }) })] })) : null;
};

export { CompactLabelAssistance, CompactUserAssistance, IconUserAssistance, InlineHelp, InlineRequired, InlineUserAssistance, InlineUserAssistanceContainer };
//# sourceMappingURL=UNSAFE_UserAssistance.js.map
