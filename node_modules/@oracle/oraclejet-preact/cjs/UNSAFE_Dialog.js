/* @oracle/oraclejet-preact: 15.1.5 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('preact/jsx-runtime');
var hooks = require('preact/hooks');
var compat = require('preact/compat');
require('./hooks/UNSAFE_useAnimation.js');
var hooks_UNSAFE_useComponentTheme = require('./hooks/UNSAFE_useComponentTheme.js');
var UNSAFE_Layer = require('./UNSAFE_Layer.js');
require('./UNSAFE_Modal.js');
require('./UNSAFE_FocusTrap.js');
var UNSAFE_WindowOverlay = require('./UNSAFE_WindowOverlay.js');
var hooks_UNSAFE_useId = require('./hooks/UNSAFE_useId.js');
var UNSAFE_Dialog_themes_redwood_DialogTheme = require('./UNSAFE_Dialog/themes/redwood/DialogTheme.js');
var useAnimation = require('./useAnimation-7cafa3a6.js');
var FocusTrap = require('./FocusTrap-e14c0b16.js');
var Modal = require('./Modal-ff15f927.js');
require('./utils/UNSAFE_logger.js');
require('./_curry1-0b6f3f91.js');
require('./_curry2-a17eeaf0.js');
require('./index-6afef480.js');
require('preact');
require('./Common.js');
require('./Common/themes.js');
require('./Common/themes/redwood/theme.js');
require('./Common/themes/themeContract.css.js');
require('./useThemeInterpolations-0d77676d.js');
require('./hooks/UNSAFE_useColorScheme.js');
require('./hooks/UNSAFE_useScale.js');
require('./utils/UNSAFE_interpolations/theme.js');
require('./UNSAFE_Theme.js');
require('./utils-302a51a4.js');
require('./utils/UNSAFE_mergeInterpolations.js');
require('./utils/UNSAFE_classNames.js');
require('./classNames-9be98b10.js');
require('./_curry3-f8fec1ad.js');
require('./_has-fd104668.js');

require('./utils/PRIVATE_tabbableUtils.js');
require('./_arity-f5624a57.js');
require('./vanilla-extract-dynamic.esm-38df8d31.js');
require('./UNSAFE_WindowOverlay/themes/WindowOverlayStyles.css.js');

require('./UNSAFE_WindowOverlay/themes/WindowOverlayContract.css.js');
require('./hooks/UNSAFE_useUser.js');
require('./UNSAFE_WindowOverlay/themes/redwood/WindowOverlayTheme.js');
require('./UNSAFE_WindowOverlay/themes/redwood/WindowOverlayBaseTheme.css.js');

require('./UNSAFE_WindowOverlay/themes/redwood/WindowOverlayVariants.css.js');
require('./vanilla-extract-recipes-createRuntimeFn.esm-2363e111.js');
require('./UNSAFE_Dialog/themes/DialogStyles.css.js');

require('./UNSAFE_Dialog/themes/redwood/DialogBaseTheme.css.js');

require('./UNSAFE_Dialog/themes/redwood/DialogVariants.css.js');
require('./useModal-63160742.js');
require('./UNSAFE_Modal/themes/ModalStyles.css.js');


const StyledDialogHeader = ({ header, id }) => {
    const { styles } = hooks_UNSAFE_useComponentTheme.useComponentTheme(UNSAFE_Dialog_themes_redwood_DialogTheme.DialogRedwoodTheme);
    const content = typeof header === 'string' ? (jsxRuntime.jsx("h1", { id: id, className: styles.dialogTitleStyle, children: header })) : (header);
    return (jsxRuntime.jsx("div", { "aria-labelledby": id, className: styles.dialogHeaderStyle, children: content }));
};
const StyledDialog = compat.forwardRef(({ children, header, footer, labelId, role, ariaLabelledBy, ariaDescribedBy, onKeyDown }, ref) => {
    const { classes, styles } = hooks_UNSAFE_useComponentTheme.useComponentTheme(UNSAFE_Dialog_themes_redwood_DialogTheme.DialogRedwoodTheme);
    return (jsxRuntime.jsx("div", { ref: ref, className: classes, style: { opacity: 0 }, onKeyDown: onKeyDown, role: role, "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy, children: jsxRuntime.jsxs("div", { className: styles.dialogContainerStyle, children: [jsxRuntime.jsx(StyledDialogHeader, { id: labelId, header: header }), jsxRuntime.jsx("div", { className: styles.dialogContentStyle, children: jsxRuntime.jsx("div", { className: styles.dialogBodyStyle, children: children }) }), jsxRuntime.jsx("div", { className: styles.dialogFooterStyle, children: footer })] }) }));
});
// main Dialog component
/**
 * WAI-ARIA-compliant dialog component. A dialog is a floating window that typically contains
 * a title bar and a content area.
 * The dialog is generally placed on top of the rest of the page content. It can be either modal
 * (only the content in the dialog can be interacted with) or non-modal (it's still possible
 * to interact with content outside of the dialog).
 */
const Dialog = ({ autoFocusRef, children, isOpen, header = '', footer, modality = 'modal', placement = 'center', offset = 0, onClose, onTransitionEnd, role = 'dialog', 'aria-labelledby': ariaLabelledBy, 'aria-describedby': ariaDescribedBy }) => {
    const [state, setState] = hooks.useState(isOpen ? 'opening' : 'unmounted');
    const uniqueId = hooks_UNSAFE_useId.useId();
    const labelId = ariaLabelledBy ? ariaLabelledBy : uniqueId;
    hooks.useEffect(() => {
        // Ignore state update on initial render
        if (state === 'unmounted' && !isOpen) {
            return;
        }
        setState(isOpen ? 'opening' : 'closing');
    }, [isOpen, state]);
    const { nodeRef } = useAnimation.useAnimation(state, {
        animationStates,
        isAnimatedOnMount: true,
        onAnimationEnd: ({ animationState }) => {
            if (animationState === 'closing') {
                setState('unmounted');
                onTransitionEnd?.(false);
            }
            else {
                onTransitionEnd?.(true);
            }
        }
    });
    const handleKeyDown = (event) => {
        switch (event.code) {
            case 'Escape': {
                onClose?.({ reason: 'escapeKey' });
                break;
            }
        }
    };
    const renderDialog = () => {
        return (jsxRuntime.jsx(UNSAFE_WindowOverlay.WindowOverlay, { placement: placement, offset: offset, children: jsxRuntime.jsx(FocusTrap.FocusTrap, { autoFocusRef: autoFocusRef, children: jsxRuntime.jsx(StyledDialog, { ref: nodeRef, labelId: labelId, header: header, footer: footer, role: role, ariaLabelledBy: labelId, ariaDescribedBy: ariaDescribedBy, onKeyDown: handleKeyDown, children: children }) }) }));
    };
    if (modality === 'modal') {
        return jsxRuntime.jsx(Modal.Modal, { isOpen: state !== 'unmounted', children: renderDialog() });
    }
    else {
        return state !== 'unmounted' ? jsxRuntime.jsx(UNSAFE_Layer.Layer, { children: renderDialog() }) : null;
    }
};
const animationStates = {
    opening: {
        from: {
            scaleX: 0,
            scaleY: 0,
            transformOrigin: 'center',
            opacity: 0
        },
        to: {
            scaleX: 1,
            scaleY: 1,
            opacity: 1
        },
        options: {
            duration: 200
        }
    },
    closing: {
        from: {
            scaleX: 1,
            scaleY: 1,
            transformOrigin: 'center',
            opacity: 1
        },
        to: {
            scaleX: 0,
            scaleY: 0,
            opacity: 0
        },
        options: {
            duration: 200
        }
    }
};

exports.Dialog = Dialog;
//# sourceMappingURL=UNSAFE_Dialog.js.map
