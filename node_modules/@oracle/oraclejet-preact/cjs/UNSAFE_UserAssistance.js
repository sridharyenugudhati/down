/* @oracle/oraclejet-preact: 15.1.5 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('preact/jsx-runtime');
var hooks_UNSAFE_useComponentTheme = require('./hooks/UNSAFE_useComponentTheme.js');
var InlineHelpSource = require('./InlineHelpSource-5248b808.js');
var UNSAFE_UserAssistance_themes_redwood_UserAssistanceTheme = require('./UNSAFE_UserAssistance/themes/redwood/UserAssistanceTheme.js');
var hooks_UNSAFE_useTranslationBundle = require('./hooks/UNSAFE_useTranslationBundle.js');
require('./UNSAFE_ComponentMessage.js');
var hooks_UNSAFE_useFormContext = require('./hooks/UNSAFE_useFormContext.js');
var hooks_UNSAFE_useFormFieldContext = require('./hooks/UNSAFE_useFormFieldContext.js');
require('./utils/UNSAFE_classNames.js');
var hooks_UNSAFE_useInputGroupContext = require('./hooks/UNSAFE_useInputGroupContext.js');
var classNames = require('./classNames-9be98b10.js');
var ComponentMessageContainer = require('./ComponentMessageContainer-a62859a0.js');
var UNSAFE_Popup = require('./UNSAFE_Popup.js');
require('./UNSAFE_Divider.js');
var CompactHelpSource = require('./CompactHelpSource-2205f12e.js');
var UNSAFE_UserAssistance_themes_UserAssistanceStyles_css = require('./UNSAFE_UserAssistance/themes/UserAssistanceStyles.css.js');
var Divider = require('./Divider-618a6a64.js');
var hooks_UNSAFE_useTooltip = require('./hooks/UNSAFE_useTooltip.js');
var hooks = require('preact/hooks');
var hooks_UNSAFE_usePress = require('./hooks/UNSAFE_usePress.js');
var hooks_UNSAFE_useToggle = require('./hooks/UNSAFE_useToggle.js');
var PRIVATE_ThemedIcons_HelpIcon = require('./PRIVATE_ThemedIcons/HelpIcon.js');
var UNSAFE_Popup_themes_redwood_PopupTheme = require('./UNSAFE_Popup/themes/redwood/PopupTheme.js');
require('./utils/UNSAFE_logger.js');
require('./_curry1-0b6f3f91.js');
require('./_curry2-a17eeaf0.js');
require('./hooks/UNSAFE_useTabbableMode.js');
require('preact');
require('./UNSAFE_UserAssistance/themes/redwood/UserAssistanceBaseTheme.css.js');

require('./UNSAFE_UserAssistance/themes/redwood/UserAssistanceVariants.css.js');

require('./vanilla-extract-recipes-createRuntimeFn.esm-2363e111.js');
require('./index-6afef480.js');
require('./Common.js');
require('./Common/themes.js');
require('./Common/themes/redwood/theme.js');
require('./Common/themes/themeContract.css.js');
require('preact/compat');
require('./ComponentMessage-f4f6337b.js');
require('./PRIVATE_Message.js');
require('./UNSAFE_Flex.js');
require('./Flex-1ec299b1.js');
require('./utils/UNSAFE_interpolations/dimensions.js');
require('./utils/UNSAFE_arrayUtils.js');
require('./utils/UNSAFE_size.js');
require('./UNSAFE_Theme.js');
require('./utils-302a51a4.js');
require('./utils/UNSAFE_mergeInterpolations.js');
require('./_curry3-f8fec1ad.js');
require('./_has-fd104668.js');

require('./utils/UNSAFE_interpolations/boxalignment.js');
require('./keys-6a2659ff.js');
require('./utils/UNSAFE_interpolations/flexbox.js');
require('./flexbox-d3b5e1d4.js');
require('./utils/UNSAFE_interpolations/flexitem.js');
require('./flexitem-9cf944f6.js');
require('./utils/PRIVATE_timer.js');
require('./PRIVATE_Message/themes/MessageStyles.css.js');

require('./MessageCloseButton-1588f866.js');
require('./UNSAFE_IconButton.js');
require('./IconButton-a240d0cf.js');
require('./UNSAFE_BaseButton.js');
require('./BaseButton-07448bdc.js');
require('./hooks/UNSAFE_useHover.js');
require('./hooks/UNSAFE_useActive.js');
require('./utils/PRIVATE_clientHints.js');
require('./clientHints-8eb1c993.js');
require('./utils/UNSAFE_mergeProps.js');
require('./UNSAFE_ButtonLayout.js');
require('./ButtonLayout-d697861c.js');
require('./UNSAFE_Text.js');
require('./Text-5228ae0e.js');
require('./UNSAFE_Text/themes/TextStyles.css.js');

require('./PRIVATE_ThemedIcons/CloseIcon.js');
require('./UNSAFE_Icon.js');
require('./Icon-00a7fc7b.js');
require('./UNSAFE_Icon/themes/IconStyle.css.js');

require('./MessageDetail-677f4e86.js');
require('./MessageFormattingUtils-5e7b02d0.js');
require('./utils/UNSAFE_getLocale.js');
require('./utils/UNSAFE_stringUtils.js');
require('./stringUtils-16e85428.js');
require('./Message.types-4d0eafe2.js');
require('./MessageStartIcon-974fe084.js');
require('./PRIVATE_ThemedIcons/MessageConfirmationIcon.js');
require('./PRIVATE_ThemedIcons/MessageErrorIcon.js');
require('./PRIVATE_ThemedIcons/MessageInfoIcon.js');
require('./PRIVATE_ThemedIcons/MessageWarningIcon.js');
require('./MessageSummary-833bd195.js');
require('./MessageTimestamp-3afa2904.js');
require('./MessageUtils-4d8c0ff6.js');
require('./utils/UNSAFE_soundUtils.js');
require('./UNSAFE_MessageBanner/themes/redwood/MessageBannerTheme.js');
require('./UNSAFE_MessageBanner/themes/MessageBannerStyles.css.js');

require('./UNSAFE_MessageBanner/themes/redwood/MessageBannerBaseTheme.css.js');

require('./UNSAFE_MessageBanner/themes/redwood/MessageBannerVariants.css.js');

require('./MessagesManager-385a3962.js');
require('./PRIVATE_TransitionGroup.js');
require('./hooks/UNSAFE_useAnimation.js');
require('./useAnimation-7cafa3a6.js');
require('./hooks/UNSAFE_useMessagesContext.js');
require('./UNSAFE_HiddenAccessible.js');
require('./HiddenAccessible-e1bc54ed.js');
require('./UNSAFE_ComponentMessage/themes/redwood/ComponentMessageTheme.js');
require('./UNSAFE_ComponentMessage/themes/ComponentMessageStyles.css.js');

require('./UNSAFE_ComponentMessage/themes/redwood/ComponentMessageBaseTheme.css.js');

require('./UNSAFE_ComponentMessage/themes/redwood/ComponentMessageVariants.css.js');
require('./UNSAFE_Floating.js');
require('./Floating-ac3c61ed.js');
require('./index-989087dc.js');
require('./hooks/UNSAFE_useUser.js');
require('./utils/PRIVATE_floatingUtils.js');
require('./utils/PRIVATE_refUtils.js');
require('./hooks/UNSAFE_useOutsideClick.js');
require('./UNSAFE_Floating/themes/redwood/FloatingTheme.js');
require('./UNSAFE_Floating/themes/FloatingStyles.css.js');

require('./UNSAFE_Floating/themes/redwood/FloatingBaseTheme.css.js');

require('./UNSAFE_Floating/themes/redwood/FloatingVariants.css.js');
require('./vanilla-extract-dynamic.esm-38df8d31.js');
require('./UNSAFE_Floating/themes/FloatingContract.css.js');
require('./utils/PRIVATE_tabbableUtils.js');
require('./_arity-f5624a57.js');
require('./UNSAFE_FocusTrap.js');
require('./FocusTrap-e14c0b16.js');
require('./UNSAFE_Layer.js');
require('./useThemeInterpolations-0d77676d.js');
require('./hooks/UNSAFE_useColorScheme.js');
require('./hooks/UNSAFE_useScale.js');
require('./utils/UNSAFE_interpolations/theme.js');
require('./hooks/PRIVATE_useAnimationStatus.js');
require('./UNSAFE_Popup/themes/PopupContract.css.js');
require('./hooks/UNSAFE_useFocusWithin.js');
require('./useFocusWithin-1725a073.js');
require('./UNSAFE_Label/themes/redwood/LabelTheme.js');
require('./UNSAFE_Label/themes/LabelStyles.css.js');

require('./UNSAFE_Label/themes/redwood/LabelBaseTheme.css.js');

require('./UNSAFE_Label/themes/redwood/LabelVariants.css.js');
require('./UNSAFE_Divider/themes/DividerStyles.css.js');

require('./hooks/UNSAFE_useId.js');
require('./hooks/UNSAFE_useFocus.js');
require('./hooks/UNSAFE_useTouch.js');
require('./hooks/UNSAFE_useThemeInterpolations.js');
require('./hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentTheme.js');
require('./hooks/UNSAFE_useTooltip/themes/TooltipContentStyles.css.js');

require('./hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.css.js');

require('./hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentVariants.css.js');

require('./UNSAFE_Popup/themes/redwood/PopupBaseTheme.css.js');

require('./UNSAFE_Popup/themes/redwood/PopupVariants.css.js');


function InlineHelp({ assistiveText, sourceLink, sourceText }) {
    const { styles: { helpTextStyles } } = hooks_UNSAFE_useComponentTheme.useComponentTheme(UNSAFE_UserAssistance_themes_redwood_UserAssistanceTheme.UserAssistanceRedwoodTheme);
    return (jsxRuntime.jsxs("div", { children: [assistiveText && sourceLink ? (jsxRuntime.jsx("span", { class: helpTextStyles, children: assistiveText })) : (assistiveText), sourceLink && jsxRuntime.jsx(InlineHelpSource.InlineHelpSource, { source: sourceLink, children: sourceText })] }));
}

function InlineRequired({ align = 'end', hasHelp = false, hasMessages = false }) {
    const { classes } = hooks_UNSAFE_useComponentTheme.useComponentTheme(UNSAFE_UserAssistance_themes_redwood_UserAssistanceTheme.UserAssistanceRedwoodTheme, {
        align,
        visible: hasHelp || hasMessages ? 'hide' : 'show' // TODO: fix typing so that options autocomplete
    });
    const translations = hooks_UNSAFE_useTranslationBundle.useTranslationBundle('@oracle/oraclejet-preact');
    const requiredStr = translations.userAssistance_required();
    return jsxRuntime.jsx("div", { class: classes, children: requiredStr });
}

// defaults to type='reflow'. If this is within an oj-form-layout, the o-f-l
// will pass down its type which defaults to 'efficient' (TODO).
function InlineUserAssistanceContainer({ variant = 'reflow', children, id }) {
    const { classes, styles: { inlineContainerBaseStyles } } = hooks_UNSAFE_useComponentTheme.useComponentTheme(UNSAFE_UserAssistance_themes_redwood_UserAssistanceTheme.UserAssistanceRedwoodTheme, {
        container: variant
    });
    // we want to suppress the display of messages if it's in a group context
    const inputGroupContext = hooks_UNSAFE_useInputGroupContext.useInputGroupContext();
    if (inputGroupContext !== null)
        return null;
    const content = (jsxRuntime.jsx("div", { class: classNames.classNames([classes, inlineContainerBaseStyles]), id: id, children: children }));
    return content;
}

// This has the precedence rules for the user assistance.
function InlineUserAssistance({ assistiveText, fieldLabel, helpSourceLink, helpSourceText, id, isRequiredShown, requiredAlignment, messages = [], userAssistanceDensity }) {
    const { isReadonly: isFormReadonly } = hooks_UNSAFE_useFormContext.useFormContext();
    const needsUserAssistanceIfNoContent = userAssistanceDensity === 'efficient' && isFormReadonly === false;
    const { isFocused } = hooks_UNSAFE_useFormFieldContext.useFormFieldContext();
    const uaInlineContent = messages.length > 0 ? (jsxRuntime.jsx(ComponentMessageContainer.ComponentMessageContainer, { fieldLabel: fieldLabel, messages: messages })) : (assistiveText || helpSourceLink) && isFocused ? (jsxRuntime.jsx(InlineHelp, { assistiveText: assistiveText, sourceLink: helpSourceLink, sourceText: helpSourceText })) : isRequiredShown ? (jsxRuntime.jsx(InlineRequired, { align: requiredAlignment })) : null;
    // when reflow we do not render unless it has content.
    // when efficient we render regardless of if it has content.
    // TODO: Get the userAssistanceDensity value from the FormContext
    return uaInlineContent || needsUserAssistanceIfNoContent ? (jsxRuntime.jsx(InlineUserAssistanceContainer, { id: id, variant: userAssistanceDensity, children: uaInlineContent })) : null;
}

function CompactUserAssistance({ anchorRef, assistiveText, fieldLabel, id, messages = [] }) {
    const { isInputFocused, isReadonly } = hooks_UNSAFE_useFormFieldContext.useFormFieldContext();
    const flip = { mainAxis: true, crossAxis: false };
    const { isFocused: isPopupFocused, popupProps } = CompactHelpSource.usePopupFocusWithin();
    const isOpen = isInputFocused === true || isPopupFocused === true;
    const { baseTheme } = hooks_UNSAFE_useComponentTheme.useComponentTheme(UNSAFE_UserAssistance_themes_redwood_UserAssistanceTheme.UserAssistanceRedwoodTheme);
    const uaCompactContent = isReadonly !== true && (messages.length > 0 || assistiveText) ? (jsxRuntime.jsx(UNSAFE_Popup.Popup, { ...popupProps, placement: "end-top-corner", isOpen: isOpen, anchorRef: anchorRef, flipOptions: flip, tail: "simple", children: jsxRuntime.jsxs("div", { id: id, class: baseTheme, children: [messages.length > 0 && (jsxRuntime.jsx(ComponentMessageContainer.ComponentMessageContainer, { fieldLabel: fieldLabel, messages: messages })), messages.length > 0 && assistiveText && (jsxRuntime.jsx("span", { class: UNSAFE_UserAssistance_themes_UserAssistanceStyles_css.dividerStyle, children: jsxRuntime.jsx(Divider.Divider, {}) })), assistiveText && jsxRuntime.jsx("span", { class: UNSAFE_UserAssistance_themes_UserAssistanceStyles_css.assistiveStyles, children: assistiveText })] }) })) : null;
    return uaCompactContent;
}

const CompactLabelAssistance = ({ helpIconId, helpSourceLink, helpSourceText, isRequiredShown, labelEdge }) => {
    const translations = hooks_UNSAFE_useTranslationBundle.useTranslationBundle('@oracle/oraclejet-preact');
    const requiredStr = translations.userAssistance_required();
    const { tooltipContent, tooltipProps } = hooks_UNSAFE_useTooltip.useTooltip({
        text: requiredStr,
        offset: { mainAxis: 8 }
    });
    const requiredStyles = classNames.classNames([
        UNSAFE_UserAssistance_themes_UserAssistanceStyles_css.requiredIconBase,
        labelEdge === 'start' && UNSAFE_UserAssistance_themes_UserAssistanceStyles_css.requiredIconLabelEdgeStart
    ]);
    const requiredIndicator = isRequiredShown && (jsxRuntime.jsxs("span", { children: [jsxRuntime.jsx("span", { class: requiredStyles, ...tooltipProps }), tooltipContent] }));
    const helpIndicator = (helpSourceLink || helpSourceText) && (jsxRuntime.jsx(CompactHelpSource.CompactHelpSource, { id: helpIconId, labelEdge: labelEdge, source: helpSourceLink, children: helpSourceText }));
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [labelEdge !== 'start' && requiredIndicator, helpIndicator, labelEdge === 'start' && requiredIndicator] }));
};

/**
 * Created to match icon user assistance spec for use with radio option, pending design review
 * of inline UA assistance.
 */
const IconUserAssistance = ({ assistiveText, helpSourceLink, helpSourceText, isTabbable = true, id }) => {
    const { bool: isOpen, setFalse: setIsOpenFalse, setTrue: setIsOpenTrue } = hooks_UNSAFE_useToggle.useToggle(false);
    const translations = hooks_UNSAFE_useTranslationBundle.useTranslationBundle('@oracle/oraclejet-preact');
    const userAssistance_learnMoreStr = translations.userAssistance_learnMore();
    const sourceText = helpSourceLink && (helpSourceText || userAssistance_learnMoreStr);
    // We are referencing popup vars, so we need to bring in the baseTheme for popup
    const { baseTheme: popupBaseTheme } = hooks_UNSAFE_useComponentTheme.useComponentTheme(UNSAFE_Popup_themes_redwood_PopupTheme.PopupRedwoodTheme);
    const { pressProps } = hooks_UNSAFE_usePress.usePress((e) => {
        e.preventDefault();
        setIsOpenTrue();
    });
    const anchorRef = hooks.useRef(null);
    const iconUserAssistanceClasses = classNames.classNames([popupBaseTheme, UNSAFE_UserAssistance_themes_UserAssistanceStyles_css.iconUserAssistancePopupFocus]);
    return helpSourceLink || assistiveText ? (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx("span", { ...pressProps, ref: anchorRef, tabIndex: isTabbable ? 0 : -1, class: UNSAFE_UserAssistance_themes_UserAssistanceStyles_css.iconUserAssistanceIcon, id: `${id}-help-icon`, children: jsxRuntime.jsx(PRIVATE_ThemedIcons_HelpIcon.HelpIcon, {}) }), jsxRuntime.jsx(UNSAFE_Popup.Popup, { placement: "top", isOpen: isOpen, anchorRef: anchorRef, onClose: setIsOpenFalse, onClickOutside: setIsOpenFalse, shiftOptions: { mainAxis: true, crossAxis: false }, initialFocus: "firstFocusable", children: jsxRuntime.jsx("div", { id: id, tabIndex: 0, class: iconUserAssistanceClasses, children: jsxRuntime.jsx(InlineHelp, { assistiveText: assistiveText, sourceLink: helpSourceLink, sourceText: sourceText }) }) })] })) : null;
};

exports.InlineHelpSource = InlineHelpSource.InlineHelpSource;
exports.CompactLabelAssistance = CompactLabelAssistance;
exports.CompactUserAssistance = CompactUserAssistance;
exports.IconUserAssistance = IconUserAssistance;
exports.InlineHelp = InlineHelp;
exports.InlineRequired = InlineRequired;
exports.InlineUserAssistance = InlineUserAssistance;
exports.InlineUserAssistanceContainer = InlineUserAssistanceContainer;
//# sourceMappingURL=UNSAFE_UserAssistance.js.map
