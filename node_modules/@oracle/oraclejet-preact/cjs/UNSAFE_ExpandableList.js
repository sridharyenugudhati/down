/* @oracle/oraclejet-preact: 15.1.5 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('preact/jsx-runtime');
var preact = require('preact');
var hooks = require('preact/hooks');
var compat = require('preact/compat');
require("identity-obj-proxy");
require('./utils/UNSAFE_classNames.js');
var hooks_UNSAFE_useId = require('./hooks/UNSAFE_useId.js');
var hooks_UNSAFE_useTranslationBundle = require('./hooks/UNSAFE_useTranslationBundle.js');
var utils_UNSAFE_keys = require('./utils/UNSAFE_keys.js');
require('./UNSAFE_Button.js');
require('./UNSAFE_HiddenAccessible.js');
require('./PRIVATE_ThemedIcons/ExpandIcon.js');
var PRIVATE_ThemedIcons_CollapseIcon = require('./PRIVATE_ThemedIcons/CollapseIcon.js');
var PRIVATE_List = require('./PRIVATE_List.js');
var UNSAFE_LiveRegion = require('./UNSAFE_LiveRegion.js');
var hooks_UNSAFE_useUser = require('./hooks/UNSAFE_useUser.js');
var utils_PRIVATE_collectionUtils = require('./utils/PRIVATE_collectionUtils.js');
var List = require('./List-b74bb6b8.js');
var HiddenAccessible = require('./HiddenAccessible-e1bc54ed.js');
var classNames = require('./classNames-9be98b10.js');
var Button = require('./Button-3c205ecb.js');
var index = require('./index-cdb75198.js');
require('./index-6afef480.js');
require('./Common.js');
require('./Common/themes.js');
require('./Common/themes/redwood/theme.js');
require('./Common/themes/themeContract.css.js');
require('./UNSAFE_BaseButton.js');
require('./BaseButton-07448bdc.js');
require('./hooks/UNSAFE_usePress.js');
require('./hooks/UNSAFE_useHover.js');
require('./hooks/UNSAFE_useToggle.js');
require('./hooks/UNSAFE_useActive.js');
require('./utils/UNSAFE_interpolations/dimensions.js');
require('./utils/UNSAFE_arrayUtils.js');
require('./utils/UNSAFE_size.js');
require('./UNSAFE_Theme.js');
require('./utils-302a51a4.js');
require('./_curry1-0b6f3f91.js');
require('./utils/UNSAFE_mergeInterpolations.js');
require('./_curry3-f8fec1ad.js');
require('./_curry2-a17eeaf0.js');
require('./_has-fd104668.js');
require('./utils/PRIVATE_clientHints.js');
require('./clientHints-8eb1c993.js');
require('./hooks/UNSAFE_useTabbableMode.js');
require('./utils/UNSAFE_mergeProps.js');
require('./UNSAFE_ButtonLayout.js');
require('./ButtonLayout-d697861c.js');
require('./UNSAFE_Text.js');
require('./Text-5228ae0e.js');
require('./UNSAFE_Text/themes/TextStyles.css.js');

require('./vanilla-extract-recipes-createRuntimeFn.esm-2363e111.js');
require('./UNSAFE_Icon.js');
require('./Icon-00a7fc7b.js');
require('./hooks/UNSAFE_useTooltip.js');
require('./UNSAFE_Floating.js');
require('./Floating-ac3c61ed.js');
require('./index-989087dc.js');
require('./utils/PRIVATE_floatingUtils.js');
require('./utils/PRIVATE_refUtils.js');
require('./hooks/UNSAFE_useOutsideClick.js');
require('./hooks/UNSAFE_useComponentTheme.js');
require('./utils/UNSAFE_logger.js');
require('./UNSAFE_Floating/themes/redwood/FloatingTheme.js');
require('./UNSAFE_Floating/themes/FloatingStyles.css.js');

require('./UNSAFE_Floating/themes/redwood/FloatingBaseTheme.css.js');

require('./UNSAFE_Floating/themes/redwood/FloatingVariants.css.js');
require('./vanilla-extract-dynamic.esm-38df8d31.js');
require('./UNSAFE_Floating/themes/FloatingContract.css.js');
require('./UNSAFE_Layer.js');
require('./useThemeInterpolations-0d77676d.js');
require('./hooks/UNSAFE_useColorScheme.js');
require('./hooks/UNSAFE_useScale.js');
require('./utils/UNSAFE_interpolations/theme.js');
require('./hooks/UNSAFE_useFocus.js');
require('./hooks/UNSAFE_useTouch.js');
require('./hooks/UNSAFE_useAnimation.js');
require('./useAnimation-7cafa3a6.js');
require('./hooks/UNSAFE_useThemeInterpolations.js');
require('./hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentTheme.js');
require('./hooks/UNSAFE_useTooltip/themes/TooltipContentStyles.css.js');

require('./hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.css.js');

require('./hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentVariants.css.js');

require('./UNSAFE_Icon/themes/IconStyle.css.js');

require('./hoc/PRIVATE_withDirectionIcon.js');
require('./hooks/UNSAFE_useViewportIntersect.js');
require('./hooks/UNSAFE_useInteractionStyle.js');
require('./utils/UNSAFE_interpolations/flexitem.js');
require('./flexitem-9cf944f6.js');
require('./keys-6a2659ff.js');
require('./PRIVATE_List/themes/ListStyles.css.js');

require('./UNSAFE_GroupedList/themes/redwood/GroupedListTheme.js');
require('./UNSAFE_GroupedList/themes/GroupedListStyles.css.js');

require('./UNSAFE_GroupedList/themes/redwood/GroupedListBaseTheme.css.js');

require('./SkeletonContainer-8a290dec.js');
require('./UNSAFE_Flex.js');
require('./Flex-1ec299b1.js');
require('./utils/UNSAFE_interpolations/boxalignment.js');
require('./utils/UNSAFE_interpolations/flexbox.js');
require('./flexbox-d3b5e1d4.js');
require('./UNSAFE_Skeleton.js');
require('./Skeleton-691e13a3.js');
require('./utils/UNSAFE_interpolations/borders.js');
require('./UNSAFE_Skeleton/themes/redwood/SkeletonTheme.js');
require('./UNSAFE_Skeleton/themes/SkeletonStyles.css.js');

require('./UNSAFE_Skeleton/themes/redwood/SkeletonBaseTheme.css.js');

require('./UNSAFE_Skeleton/themes/redwood/SkeletonVariants.css.js');
require('./PRIVATE_LoadMoreCollection.js');
require('./LoadMoreCollection-7355820a.js');
require('./PRIVATE_Collection.js');
require('./Collection-44c673ef.js');
require('./PRIVATE_VirtualizedCollection.js');
require('./VirtualizedCollection-d24661ea.js');
require('./UNSAFE_FocusTrap.js');
require('./FocusTrap-e14c0b16.js');
require('./utils/PRIVATE_tabbableUtils.js');
require('./_arity-f5624a57.js');
require('./hooks/PRIVATE_useSelection.js');
require('./hooks/PRIVATE_useCurrentKey.js');
require('./hooks/PRIVATE_useCollectionFocusRing.js');
require('./hooks/PRIVATE_useTabbableModeSet.js');
require('./hooks/PRIVATE_useItemAction.js');
require('./UNSAFE_Selector.js');
require('./PRIVATE_ThemedIcons/CheckboxOffIcon.js');
require('./PRIVATE_Icons/CheckboxOff.js');
require('./PRIVATE_ThemedIcons/CheckboxOnIcon.js');
require('./PRIVATE_Icons/CheckboxOn.js');
require('./PRIVATE_ThemedIcons/CheckboxMixedIcon.js');
require('./PRIVATE_Icons/CheckboxMixed.js');
require('./UNSAFE_Selector/themes/SelectorStyles.css.js');

require('./UNSAFE_Radio/themes/redwood/RadioIconTheme.js');
require('./UNSAFE_Radio/themes/RadioIconStyles.css.js');

require('./UNSAFE_Radio/themes/redwood/RadioIconBaseTheme.css.js');

require('./UNSAFE_Radio/themes/redwood/RadioIconVariants.css.js');

require('./hooks/PRIVATE_useCollectionGestureContext.js');

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
/**
 * A hook that handles mouse and keyboard gesture that toggles the expanded state.
 * @param keyExtractor
 * @param expanded
 * @param onToggle
 * @returns
 */
function useExpandCollapse(keyExtractor, expanded, onToggle) {
    const { direction } = hooks_UNSAFE_useUser.useUser();
    const isRtl = direction === 'rtl';
    const onClick = hooks.useCallback((event) => {
        handleToggle(event, keyExtractor, onToggle);
    }, [keyExtractor, onToggle]);
    const onKeyUp = hooks.useCallback((event) => {
        if (event.key === 'Enter' || event.key === ' ') {
            handleToggle(event, keyExtractor, onToggle);
        }
        else if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {
            const isLeftArrow = event.key === 'ArrowLeft' && !isRtl;
            handleArrowKey(isLeftArrow, event.target, expanded, keyExtractor, onToggle);
            // arrow key might cause it to scroll horizontally
            event.preventDefault();
            event.stopPropagation();
        }
    }, [keyExtractor, onToggle]);
    return onToggle ? { onClick, onKeyDown, onKeyUp } : {};
}
// prevent default (propagation) for keyDown to prevent scrolling the container
const onKeyDown = (event) => {
    if (event.key === 'Enter' || event.key === 'ArrowLeft' || event.key === 'ArrowRight') {
        event.preventDefault();
    }
};
const handleArrowKey = (isLeftArrow, target, expanded, keyExtractor, onToggle) => {
    const itemKey = keyExtractor(target);
    if (onToggle && itemKey) {
        const contains = utils_UNSAFE_keys.containsKey(expanded, itemKey);
        if ((isLeftArrow && contains) || (!isLeftArrow && !contains)) {
            onToggle({ value: itemKey });
        }
    }
};
const handleToggle = (event, keyExtractor, onToggle) => {
    const itemKey = keyExtractor(event.target);
    if (onToggle && itemKey) {
        onToggle({ value: itemKey });
        if (event.type === 'click') {
            event.stopPropagation();
        }
    }
};

/**
 * An ExpandableList shows a two-level group of items where each group header can be expand or collapse.
 */
function ExpandableList({
  children,
  currentKey,
  data,
  onSelectionChange,
  onToggle,
  ...props
}) {
  const [statusText, setStatusText] = hooks.useState('');
  const translations = hooks_UNSAFE_useTranslationBundle.useTranslationBundle('@oracle/oraclejet-preact');
  const expandCollapseProps = useExpandCollapse(element => {
    if (element.getAttribute('role') === 'treegrid') {
      return currentKey === undefined ? null : currentKey;
    }
    return utils_PRIVATE_collectionUtils.keyExtractor(element, PRIVATE_List.GROUP_SELECTOR);
  }, data == null ? emptyKeys : data.expanded, onToggle ? hooks.useCallback(detail => {
    onToggle(detail);
    if (data) {
      const previouslyExpanded = utils_UNSAFE_keys.containsKey(data?.expanded, detail.value);
      setStatusText(previouslyExpanded ? translations.expandableList_groupCollapse() : translations.expandableList_groupExpand());
      // we need to clear the live region text otherwise screenreader
      // won't read again if the content did not change the next time
      setTimeout(() => {
        setStatusText('');
      }, 1000);
    }
  }, [onToggle, data]) : undefined);
  const descId = hooks_UNSAFE_useId.useId();
  const stableDescId = hooks.useMemo(() => {
    // this should never change after mounted
    return descId;
  }, []);
  const createHierarchicalContext = (context, options) => {
    const expanderRenderer = options !== undefined ? () => jsxRuntime.jsx(Expander, {
      itemKey: context.metadata.key,
      expanded: options.expanded,
      onToggle: options.onToggle
    }) : undefined;
    return {
      ...context,
      parentKey: context.metadata.parentKey,
      leaf: context.metadata.isLeaf ?? true,
      depth: context.metadata.treeDepth ?? 1,
      expander: expanderRenderer
    };
  };
  const handleSelectionChange = hooks.useCallback(detail => {
    if (onSelectionChange && data) {
      const keys = PRIVATE_List.excludeGroup(data, detail.value);
      if (utils_UNSAFE_keys.isSameKey(keys, detail.value)) {
        onSelectionChange(detail);
      } else if (keys.keys && keys.keys.size > 0) {
        onSelectionChange({
          ...detail,
          value: keys
        });
      }
    }
  }, [onSelectionChange, data]);
  const customItemRenderer = context => {
    const itemKey = context.listItemContext.metadata.key;
    const options = data && onToggle ? {
      expanded: utils_UNSAFE_keys.containsKey(data.expanded, itemKey),
      onToggle
    } : undefined;
    const itemContext = createHierarchicalContext(context.listItemContext, options);
    if (itemContext.leaf) {
      return context.defaultListItem(itemContext, {
        itemDepth: itemContext.depth + 1
      });
    } else {
      return jsxRuntime.jsx(PRIVATE_List.ListGroupHeader, {
        ariaDescribedBy: stableDescId,
        itemKey: itemContext.metadata.key,
        itemIndex: itemContext.index,
        itemDepth: itemContext.depth,
        isFocused: context.isFocused,
        isFocusRingVisible: context.isFocusRingVisible,
        isActive: context.isActive,
        isGridlineVisible: false,
        isExpandable: true,
        expandedKeys: data == null ? emptyKeys : data.expanded,
        onToggle: onToggle,
        children: children(itemContext)
      }, itemContext.metadata.key);
    }
  };
  return jsxRuntime.jsxs(preact.Fragment, {
    children: [jsxRuntime.jsx(List.List, {
      isVirtualized: false,
      currentKey: currentKey,
      data: data,
      role: "treegrid",
      loadingIndicator: jsxRuntime.jsx(PRIVATE_List.GroupLoadingIndicator, {}),
      onSelectionChange: handleSelectionChange,
      customItemRenderer: customItemRenderer,
      eventHandlers: expandCollapseProps,
      ...props,
      children: context => {
        return children(context);
      }
    }), onToggle && jsxRuntime.jsxs(preact.Fragment, {
      children: [jsxRuntime.jsx(UNSAFE_LiveRegion.LiveRegion, {
        children: statusText
      }), jsxRuntime.jsx("span", {
        id: stableDescId,
        children: jsxRuntime.jsx(HiddenAccessible.HiddenAccessible, {
          children: translations.expandableList_expandCollapseInstructionText()
        })
      })]
    })]
  });
}
const emptyKeys = {
  all: false,
  keys: new Set()
};
const Expander = compat.memo(props => {
  const styles = {
    base: "_6ofmp0"
  };
  const classes = classNames.classNames([styles.base, 'oj-listview-expander']);
  const actionHandler = () => {
    props.onToggle({
      value: props.itemKey
    });
  };
  return jsxRuntime.jsx("span", {
    class: classes,
    role: "presentation",
    children: jsxRuntime.jsx(Button.Button, {
      onAction: actionHandler,
      variant: "ghost",
      startIcon: props.expanded ? jsxRuntime.jsx(index.SvgChevronDown, {
        size: "6x"
      }) : jsxRuntime.jsx(PRIVATE_ThemedIcons_CollapseIcon.CollapseIcon, {
        size: "6x"
      })
    })
  });
}, (prev, next) => {
  return prev.itemKey === next.itemKey && prev.expanded === next.expanded && prev.onToggle === next.onToggle;
});

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

exports.ExpandableList = ExpandableList;
//# sourceMappingURL=UNSAFE_ExpandableList.js.map
